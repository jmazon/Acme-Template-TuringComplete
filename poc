#! /usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Scalar::Util qw( looks_like_number );

sub interpret {
  my %translation =
    (
      '+' => '$ram[$p]++;',
      '-' => '$ram[$p]--;',
      '>' => '$p++;',
      '<' => '$p--;',
      '[' => '{my $a=$ram[$p];while ($ram[$p] = ref $a ? shift @$a : looks_like_number $a ? $ram[$p] : ord substr($a,0,1,"")) {',
      ']' => '}}',
      '.' => '$output .= (defined $ram[$p] && looks_like_number $ram[$p]) ? chr $ram[$p] : $ram[$p];',
      ',' => '$ram[$p] = shift @args;',
    );
  my ($template,@args) = @_;
  my $program = '';
  for my $c ( $template =~ /./gs ) {
    my $op = $translation{$c};
    $program .= $op // "\$output .= '$c';" . "\n";
  }

  my @ram;
  my $p = 0;
  my $output = '';

  eval $program;
  $output;
}

my $template = do { local $/; <DATA> };
print interpret(
  $template,
  'Argument',
  [qw(iterating on an array)],
  'Iterating on a string',
  'Military-grade encryption',
);

__DATA__

Straight text

+++[
  * repeated three times
-]

++++++++++[>+++++++>++++++++++>+++>+++++++++<<<<-]
>++.>+.+++++++..+++.>++.>---.<<.+++.------.--------.>+.

,>[-]+++[<.>-]

,[. ]

,[.]

,[[>>++++[>++++++++<-]<+<-[>+>+>-[>>>]<[[>+<-]>>+>]<<<<<-]]>>>[-]+>--[-[<->+++[-]]]<[++++++++++++<[>-[>+>>]>[+[<+>-]>+>>]<<<<<-]>>[<+>-]>[-[-<<[-]>>]<<[<<->>-]>>]<<[<<+>>-]]<[-]<.[-]<-]
